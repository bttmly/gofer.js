// Generated by CoffeeScript 1.6.3
(function() {
  var Gofer, goferLinks, goferPaths,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  Gofer = window.Gofer || {};

  Gofer.goferLinks = goferLinks = function() {
    return $(Gofer.config.linkSelector);
  };

  Gofer.goferPaths = goferPaths = function() {
    var a, _i, _len, _ref, _results;
    _ref = goferLinks();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      a = _ref[_i];
      _results.push(a.pathname);
    }
    return _results;
  };

  Gofer.config = {
    preloadImages: true
  };

  Gofer.pages = {};

  Gofer.imageCache = [];

  Gofer.fnGofer = function(targets, options) {
    Gofer.config.linkSelector = this.selector;
    Gofer.config.contentTargets = targets;
    switch (Gofer.util.getType(targets)) {
      case "boolean":
        if (!targets) {
          Gofer.goferOff();
          return this;
        }
        break;
      case "array":
        Gofer.config.targets = targets;
        break;
      case "string":
        Gofer.config.targets = [targets];
    }
    Gofer.loadLinks();
    Gofer.buildPageFromDOM();
    $("body").on("click", Gofer.config.linkSelector, function(event) {
      var active;
      if (event.which > 1 || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) {
        return this;
      }
      if (this.tagName.toUpperCase() !== 'A') {
        return this;
      }
      if (location.protocol !== this.protocol) {
        return this;
      }
      if (location.hostname !== this.hostname) {
        return this;
      }
      if (this.hash && this.href.replace(this.hash, '') === location.href.replace(location.hash, '')) {
        return this;
      }
      if (this.href === location.href + '#') {
        return this;
      }
      if (Gofer.config.limit) {
        active = $(Gofer.config.linkSelector).slice(0, limit);
        if (!$(this).is(active)) {
          return this;
        }
      }
      event.preventDefault();
      return Gofer.clickHandler(event, this);
    });
    return $(window).on("popstate.gofer", function(event) {
      return Gofer.popStateHandler(event);
    });
  };

  Gofer.buildPageFromDOM = function() {
    var page, path;
    path = window.location.pathname;
    page = new Gofer.Page(path);
    page.build($("html")[0].outerHTML);
    return Gofer.pages[path] = page;
  };

  Gofer.clickHandler = function(event, link) {
    var path, _ref;
    path = link.pathname;
    if ((_ref = Gofer.pages[path]) != null ? _ref.fragments : void 0) {
      return Gofer.pages[path].renderAll();
    } else if (window.sessionStorage.getItem(path)) {
      Gofer.pages[path] = new Gofer.Page(path);
      return Gofer.pages[path].retrieve().renderAll();
    } else {
      Gofer.pages[path] = new Gofer.Page(path);
      return Gofer.pages[path].load().then(this.renderAll());
    }
  };

  Gofer.pageByUrl = function(url) {
    if (Gofer.pages[url]) {
      return Gofer.pages[url];
    } else {
      Gofer.pages[url] = new Gofer.Page(url);
      if (window.sessionStorage.getItem(url)) {
        Gofer.pages[url].retrieve();
      } else {
        Gofer.pages[url].load();
      }
    }
    return Gofer.pages[url];
  };

  Gofer.popStateHandler = function(event) {
    console.log(event.originalEvent);
    if (event.originalEvent.state) {
      return Gofer.pageByUrl(event.originalEvent.state.path).renderAll();
    }
  };

  Gofer.loadLinks = function() {
    var i, path, _i, _len, _ref, _results;
    _ref = goferPaths();
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      path = _ref[i];
      console.log(path);
      if (!Gofer.pages[path]) {
        Gofer.pages[path] = new Gofer.Page(path);
        if (window.sessionStorage.getItem(path)) {
          _results.push(Gofer.pages[path].retrieve());
        } else {
          _results.push(Gofer.pages[path].load());
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Gofer.tidyStorage = function() {
    var obj, path, pathsToKeep, _ref, _results;
    pathsToKeep = goferPaths();
    _ref = Gofer.pages;
    _results = [];
    for (path in _ref) {
      obj = _ref[path];
      if (Gofer.pages.hasOwnProperty(path) && __indexOf.call(pathsToKeep, path) < 0) {
        Gofer.pages[path].save();
        _results.push(delete Gofer.pages[path]);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Gofer.tryRequestNext = function() {
    var path;
    if (Gofer.queue.pending().length < Gofer.queue.max()) {
      path = Gofer.queue.shiftQueue();
      Gofer.queue.pushPending(path);
      if (!Gofer.pages[path]) {
        Gofer.pages[path] = new Gofer.Page(path);
      }
      return Gofer.pages[path].load();
    }
  };

  Gofer.queue = (function() {
    var _max, _pending, _queue;
    _max = 5;
    _queue = [];
    _pending = [];
    return {
      max: function() {
        return _max;
      },
      queue: function() {
        return _queue;
      },
      pending: function() {
        return _pending;
      },
      pushQueue: function(path) {
        return _queue.push(path);
      },
      shiftQueue: function() {
        return _queue.shift();
      },
      pushPending: function(path) {
        return _pending.push(path);
      },
      removePending: function(path) {
        var spot;
        if ((spot = _pending.indexOf(path)) !== -1) {
          _pending.splice(spot, 1);
        }
        return _pending;
      }
    };
  })();

  $.subscribe("gofer", function() {
    var data, event;
    event = arguments[0], data = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return console.log(event);
  });

  $.subscribe("gofer.renderAll", function(event, page) {
    console.log("renderAll " + page.url);
    page.addToHistory();
    Gofer.tidyStorage();
    return Gofer.loadLinks();
  });

  $.fn.gofer = Gofer.fnGofer;

}).call(this);
