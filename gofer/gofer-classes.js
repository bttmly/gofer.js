// Generated by CoffeeScript 1.6.3
var Fragment, Gist, Gofer, Page, get, set,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

set = window.sessionStorage.setItem;

get = window.sessionStorage.getItem;

Gofer = window.Gofer || {};

Gofer.Page = Page = (function() {
  function Page(url) {
    this.addToHistory = __bind(this.addToHistory, this);
    this.load = __bind(this.load, this);
    this.build = __bind(this.build, this);
    this.add = __bind(this.add, this);
    this.empty = __bind(this.empty, this);
    this.renderAll = __bind(this.renderAll, this);
    this.retrieve = __bind(this.retrieve, this);
    this.save = __bind(this.save, this);
    this.url = url;
    this.fragments = [];
    this.targets = Gofer.config.contentTargets;
    this.loaded = false;
  }

  Page.prototype.save = function() {
    var collection, fragment, _i, _len, _ref;
    collection = [];
    _ref = this.fragments;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      fragment = _ref[_i];
      collection.push(fragment.serialize());
    }
    window.sessionStorage.setItem(this.url, JSON.stringify(collection));
    return this;
  };

  Page.prototype.retrieve = function() {
    var fragment, _i, _len, _ref;
    _ref = JSON.parse(window.sessionStorage.getItem(this.url));
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      fragment = _ref[_i];
      this.add({
        parent: this,
        html: fragment.html,
        target: fragment.target
      });
    }
    this.loaded = true;
    return this;
  };

  Page.prototype.renderAll = function() {
    var fragment, _i, _len, _ref;
    _ref = this.fragments;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      fragment = _ref[_i];
      fragment.render();
    }
    $.publish("gofer.renderAll", this);
    return this;
  };

  Page.prototype.empty = function() {
    delete this.fragments;
    return this;
  };

  Page.prototype.add = function(options) {
    var frag;
    frag = new Fragment(options);
    this.fragments.push(frag);
    if (Gofer.config.preloadImages === true) {
      frag.preloadImages();
    }
    return frag;
  };

  Page.prototype.build = function(html) {
    var $html, fragmentHtml, target, _i, _len, _ref;
    $html = $(html);
    _ref = this.targets;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      target = _ref[_i];
      fragmentHtml = $html.find(target).html();
      this.add({
        parent: this,
        html: fragmentHtml,
        target: target
      });
    }
    return this;
  };

  Page.prototype.load = function() {
    var page;
    page = this;
    return $.ajax({
      url: this.url,
      type: "GET",
      dataType: "html",
      error: function(req, status, err) {
        return $.publish("gofer.pageLoadError", [page]);
      },
      success: function(data, status, req) {
        $.publish("gofer.pageLoadSuccess", [page]);
        page.loaded = true;
        return page.build(data);
      },
      done: function(data, status, req) {
        if (this.waiting) {
          return this.deferred.resolve();
        }
      }
    });
  };

  Page.prototype.addToHistory = function() {
    window.history.pushState({
      path: this.url
    }, null, this.url);
    return this;
  };

  return Page;

})();

Gofer.Fragment = Fragment = (function() {
  function Fragment(options) {
    this.serialize = __bind(this.serialize, this);
    this.getGists = __bind(this.getGists, this);
    this.preloadImages = __bind(this.preloadImages, this);
    this.render = __bind(this.render, this);
    this.parent = options.parent, this.html = options.html, this.target = options.target;
    this.$target = $(this.target);
    this.$html = $(this.html);
    this.gists = [];
    this.getGists();
  }

  Fragment.prototype.render = function() {
    this.$target.empty().append(this.$html);
    return this;
  };

  Fragment.prototype.preloadImages = function() {
    return this.$html.find("img").each(function() {
      var img, src;
      src = this.src;
      if (__indexOf.call(Gofer.imageCache, src) < 0) {
        img = new Image();
        img.src = src;
        return Gofer.imageCache.push(src);
      }
    });
  };

  Fragment.prototype.getGists = function() {
    var $html, fragment, gistBaseUrl, gistIds, id, _i, _len, _results;
    fragment = this;
    gistBaseUrl = "https://gist.github.com";
    gistIds = [];
    $html = $("<div>" + fragment.html + "</div>");
    $html.find("script").filter(function() {
      return this.src.substring(0, gistBaseUrl.length) === gistBaseUrl;
    }).each(function() {
      var id, urlPieces;
      urlPieces = this.src.split("/");
      id = urlPieces[urlPieces.length - 1].split(".")[0];
      $(this).replaceWith($("<div data-gist-placeholder='" + id + "'></div>"));
      return gistIds.push(id);
    });
    fragment.html = $html.html();
    fragment.$html = $(fragment.html);
    _results = [];
    for (_i = 0, _len = gistIds.length; _i < _len; _i++) {
      id = gistIds[_i];
      _results.push(fragment.gists.push(new Gofer.Gist({
        id: id,
        parent: fragment
      })));
    }
    return _results;
  };

  Fragment.prototype.serialize = function() {
    return {
      target: this.target,
      html: this.$html.html()
    };
  };

  return Fragment;

})();

Gofer.Gist = Gist = (function() {
  function Gist(options) {
    this.render = __bind(this.render, this);
    this.load = __bind(this.load, this);
    this.id = options.id, this.parent = options.parent;
    this.loaded = false;
    this.load();
  }

  Gist.prototype.load = function() {
    var gist;
    gist = this;
    return $.ajax({
      url: "https://gist.github.com/" + this.id + ".json",
      type: "GET",
      dataType: "jsonp",
      error: function(req, status, err) {
        return $.publish("gofer.gistLoadError", [gist]);
      },
      success: function(data, status, req) {
        $.publish("gofer.gistLoadSuccess", [gist]);
        gist.loaded = true;
        gist.json = data;
        return gist.render();
      },
      done: function(data, status, req) {}
    });
  };

  Gist.prototype.render = function() {
    var $html, gistElement;
    if (!this.loaded) {
      return this.load().then(this.render());
    }
    gistElement = $(this.json.div);
    $html = $("<div>" + this.parent.html + "</div>");
    $html.find("[data-gist-placeholder='" + this.id + "']").replaceWith(gistElement);
    $html.prepend("<link rel='stylesheet' href='https://gist.github.com/" + this.json.stylesheet + "'>");
    this.parent.html = $html.html();
    return this.parent.$html = $(this.parent.html);
  };

  return Gist;

})();
