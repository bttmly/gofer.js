// Generated by CoffeeScript 1.6.3
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __slice = [].slice;

(function($) {
  var attach, beginPrefetch, config, detatch, fnSplink, handleClick, handlePop, makeConfig, pathOk, prefetch, preloadImages, putAndPush, queueRequest, shiftQueue, splinkCache, splinkGo, splinkLoad, splinkOff, storeThisPage, utils;
  config = {};
  makeConfig = function(context, where, options, callback) {
    var defaults, i, o, settings, splinkConfiguration, _i, _len;
    defaults = {
      loadingClass: "splink-loading",
      prefetch: true,
      limit: 0,
      animate: 250,
      stripOut: false,
      preloadImg: true,
      runScripts: false,
      customData: {},
      customHeader: [],
      maxErrors: 2
    };
    config = {
      links: context,
      $links: $(context),
      selector: $(context).selector,
      $html: $("html"),
      $body: $("body"),
      $window: $(window),
      selectors: [],
      targets: [],
      imgCache: [],
      $targets: {},
      limit: 0,
      errors: {}
    };
    if (typeof where === "string") {
      config.targets[0] = config.$targets[where] = $(where);
      config.selectors[0] = where;
    } else if ($.isPlainObject(where)) {
      config.targets[0] = config.$targets[where.target] = $(where.target);
      config.selectors[0] = where.selector === "same" ? where.target : where.selector;
    } else if ($.isArray(where)) {
      for (i = _i = 0, _len = where.length; _i < _len; i = ++_i) {
        o = where[i];
        config.targets[i] = config.$targets[o.target] = $(o.target);
        config.selectors[i] = o.selector === "same" ? o.target : o.selector;
      }
    }
    if (options) {
      if ($.isFunction(options)) {
        config.callback = options;
        settings = defaults;
        options = {};
      } else if ($.isPlainObject(options) && callback) {
        config.callback = callback;
      }
    } else {
      options = {};
    }
    return splinkConfiguration = $.extend(true, {}, defaults, options, config);
  };
  handleClick = function(link) {
    var path;
    path = link.pathname;
    if (window.sessionStorage[path] != null) {
      putAndPush(path, true);
      if (config.callback) {
        config.callback(config.targets, "local", "success");
      }
    } else {
      splinkLoad(path);
    }
  };
  splinkOff = function() {
    config.$body.off("click");
    return config.$window.off("popstate");
  };
  fnSplink = function(where, options, callback) {
    if (typeof where === "boolean" && where === false) {
      splinkOff();
      return this;
    }
    config = makeConfig(this, where, options, callback);
    config.$body.on("click", "" + config.selector, function(event) {
      var active;
      if (config.limit) {
        active = $(config.selector).slice(0, limit);
        if (!$(this).is(active)) {
          return;
        }
      }
      if (event.which > 1 || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) {
        return this;
      }
      if (this.tagName.toUpperCase() !== 'A') {
        return this;
      }
      if (location.protocol !== this.protocol) {
        return this;
      }
      if (location.hostname !== this.hostname) {
        return this;
      }
      if (this.hash && this.href.replace(this.hash, '') === location.href.replace(location.hash, '')) {
        return this;
      }
      if (this.href === location.href + '#') {
        return this;
      }
      event.preventDefault();
      return handleClick(this);
    });
    $(window).on("popstate", function(event) {
      return handlePop(event);
    });
    storeThisPage();
    if (config.prefetch) {
      return beginPrefetch();
    }
  };
  handlePop = function(event) {
    var state;
    state = event.originalEvent.state;
    if (state && window.sessionStorage[state.path]) {
      putAndPush(state.path, false);
    }
  };
  storeThisPage = function() {
    var i, selector, tempArr, _i, _len, _ref;
    tempArr = [];
    _ref = config.selectors;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      selector = _ref[i];
      tempArr[i] = {};
      tempArr[i].html = $(selector).html() || "oops";
      tempArr[i].target = config.targets[i].selector;
    }
    return window.sessionStorage.setItem(window.location.pathname, JSON.stringify(tempArr));
  };
  beginPrefetch = function() {
    var $links;
    $links = $(config.selector);
    if (config.limit) {
      $links = $links.slice(0, limit);
    }
    $links.each(function(i) {
      var path;
      path = this.pathname;
      if (window.sessionStorage.getItem(path) != null) {

      } else {
        queueRequest(path, false);
      }
    });
  };
  putAndPush = function(path, pushIt) {
    var actualPush, actualPut, duration, first, partials;
    partials = JSON.parse(window.sessionStorage.getItem(path));
    first = true;
    actualPut = function() {
      var i, partial, _i, _len;
      for (i = _i = 0, _len = partials.length; _i < _len; i = ++_i) {
        partial = partials[i];
        config.$targets[partial.target].html(partial.html);
      }
      if (pushIt) {
        actualPush();
      }
      if (config.prefetch) {
        beginPrefetch();
      }
    };
    actualPush = function() {
      window.history.pushState({
        path: path
      }, null, path);
    };
    if (config.animate) {
      duration = typeof config.animate === "boolean" ? 250 : config.animate;
      $(config.selectors.join(", ")).animate({
        opacity: 0
      }, duration, function() {
        if (first === true) {
          first = false;
          actualPut();
        }
        $(this).animate({
          opacity: 1
        }, duration);
        return config.$body.animate({
          scrollTop: 0
        }, duration);
      });
    } else {
      actualPut();
      config.$body.scrollTop();
    }
    config.$window.trigger("splinkUpdate", config.selectors);
  };
  splinkLoad = function(path, immediate) {
    var errorCount;
    if (!okPath(path)) {
      return false;
    }
    errorCount = 0;
    if (immediate) {
      config.$html.addClass(config.loadingClass);
    }
    return $.ajax({
      url: path,
      type: "GET",
      dataType: "html",
      context: config.$html,
      data: config.customData,
      beforeSend: function(xhr) {
        if (!$.isEmptyObject(config.customHeader)) {
          return xhr.setRequestHeader(config.customHeader[0], config.customHeader[1]);
        }
      },
      error: function(xhr, status, error) {
        console.error(error);
        if (immediate && errorCount < config.maxErrors) {
          errorCount++;
          return splinkLoad(path, true);
        }
      },
      success: function(data, status, xhr) {
        var $data, i, scripts, selector, tempArr, _i, _len, _ref;
        $data = $(data);
        tempArr = [];
        if (config.runScripts) {
          scripts = $data.find("script");
          if (scripts.length) {
            scripts.each(function(i) {
              if (this.text.length) {
                return $.globalEval(this.text);
              } else if (this.src) {
                console.log("get " + this.src);
                return $.globalEval("<script src='" + this.src + "'></script>");
              }
            });
          }
        }
        _ref = config.selectors;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          selector = _ref[i];
          tempArr[i] = {};
          tempArr[i].html = $data.find(selector).html();
          tempArr[i].target = config.targets[i].selector;
          if (!immediate && config.preloadImg) {
            preloadImages(tempArr[i].html);
          }
        }
        window.sessionStorage.setItem(path, JSON.stringify(tempArr));
        if (immediate) {
          return putAndPush(path, true);
        } else {
          return shiftQueue(path);
        }
      },
      complete: function(text, status, xhr) {
        var element, targets;
        console.log("request to " + path + " complete: " + status);
        if (immediate) {
          $(this).removeClass(config.loadingClass);
          if (config.callback) {
            targets = (function() {
              var _i, _len, _ref, _results;
              _ref = config.targets;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                element = _ref[_i];
                _results.push(element.selector);
              }
              return _results;
            })();
            return config.callback(targets, "ajax", status);
          }
        }
      }
    });
  };
  preloadImages = function(htmlString) {
    var i, image, images, img, src;
    images = $(htmlString).find("img");
    i = 0;
    while (i < images.length) {
      image = images.eq(i);
      src = image.attr("src");
      if (__indexOf.call(config.imgCache, src) < 0) {
        img = new Image();
        img.src = src;
        config.imgCache.push(src);
      }
      i++;
    }
    return images;
  };
  prefetch = {
    max: 5,
    pending: [],
    queue: []
  };
  queueRequest = function(url) {
    if (__indexOf.call(prefetch.queue, url) >= 0 || __indexOf.call(prefetch.pending, url) >= 0) {

    } else {
      if (prefetch.pending.length < prefetch.max) {
        prefetch.pending.push(url);
        return splinkLoad(url, false);
      } else {
        return prefetch.queue.push(url);
      }
    }
  };
  shiftQueue = function(prev) {
    var url;
    utils.removeVals(prefetch.pending, prev);
    url = prefetch.queue.shift();
    if (url) {
      return queueRequest(url);
    }
  };
  splinkGo = function(path) {
    return splinkLoad(path, true);
  };
  splinkCache = function(path) {
    return queueRequest(path);
  };
  pathOk = function(path) {
    var tempLink;
    tempLink = document.createElement("a");
    tempLink.href = path;
    if (location.protocol !== tempLink.protocol) {
      return false;
    }
    if (location.hostname !== tempLink.hostname) {
      return false;
    }
    if (tempLink.hash && tempLink.href.replace(tempLink.hash, '') === location.href.replace(location.hash, '')) {
      return false;
    }
    if (tempLink.href === location.href + '#') {
      return false;
    }
    return true;
  };
  attach = function() {
    $.fn.splink = fnSplink;
    $.splink = {};
    $.splink.go = splinkGo;
    $.splink.cache = splinkCache;
    $.splink.click = handleClick;
    $.splink.attach = $.noop;
    return $.splink.detatch = detatch;
  };
  detatch = function() {
    $.fn.splink = $.noop;
    $.splink = {};
    $.splink.go = $.noop;
    $.splink.cache = $.noop;
    $.splink.click = $.noop;
    $.splink.attach = attach;
    return $.splink.detatch = $.noop;
  };
  $.support.pjax = window.history && window.history.pushState && window.sessionStorage && !navigator.userAgent.match(/((iPod|iPhone|iPad).+\bOS\s+[1-4]|WebApps\/.+CFNetwork)/);
  if ($.support.pjax) {
    attach();
  } else {
    detatch();
  }
  utils = function() {};
  utils.removeVals = function() {
    var arr, spot, val, vals, _i, _len;
    arr = arguments[0], vals = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = vals.length; _i < _len; _i++) {
      val = vals[_i];
      spot = arr.indexOf(val);
      if (spot !== -1) {
        arr.splice(spot, 1);
      }
    }
    return arr;
  };
})(jQuery);
