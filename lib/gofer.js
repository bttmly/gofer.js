// Generated by CoffeeScript 1.6.3
/*
Tiny Pub/Sub - v0.7.0 - 2013-01-29
https://github.com/cowboy/jquery-tiny-pubsub
Copyright (c) 2013 "Cowboy" Ben Alman; Licensed MIT
*/


(function() {
  var Fragment, Page, cleanUpPlugins, goferLinks, goferPaths, jQueryPlugins, makePlugins,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function($) {
    var hub;
    hub = $({});
    $.subscribe = function() {
      return hub.on.apply(hub, arguments);
    };
    $.unsubscribe = function() {
      return hub.off.apply(hub, arguments);
    };
    return $.publish = function() {
      return hub.trigger.apply(hub, arguments);
    };
  })(jQuery);

  jQueryPlugins = [
    {
      name: "outerHTML",
      value: function() {
        var elem, tmp;
        elem = this[0];
        if (!elem) {
          return null;
        } else {
          if (typeof (tmp = elem.outerHTML) === "string") {
            return tmp;
          } else {
            return $('<div/>').html(this.eq(0).clone()).html();
          }
        }
      }
    }, {
      name: "findIn",
      value: function(selector) {
        return this.filter(selector).add(this.find(selector));
      }
    }
  ];

  makePlugins = function(plugins) {
    var plugin, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = plugins.length; _i < _len; _i++) {
      plugin = plugins[_i];
      _results.push($.fn[plugin.name] = plugin.value);
    }
    return _results;
  };

  cleanUpPlugins = function(plugins) {
    var plugin, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = plugins.length; _i < _len; _i++) {
      plugin = plugins[_i];
      _results.push($.fn[plugin.name] = void 0);
    }
    return _results;
  };

  makePlugins(jQueryPlugins);

  window.Gofer = {
    pages: {},
    defaults: {
      beforeRender: $.noop,
      afterRender: $.noop,
      customHeaders: {},
      customData: {},
      limit: 0
    },
    config: {}
  };

  goferLinks = function() {
    return $(Gofer.config.linkSelector);
  };

  goferPaths = function() {
    var a, _i, _len, _ref, _results;
    _ref = goferLinks();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      a = _ref[_i];
      _results.push(a.pathname);
    }
    return _results;
  };

  Gofer.fnGofer = function(targets, options) {
    options || (options = {});
    options.linkSelector = this.selector;
    options.contentTargets = targets;
    $.extend(Gofer.config, Gofer.defaults, options);
    Gofer.loadLinks();
    Gofer.buildPageFromDOM();
    $("body").on("click", Gofer.config.linkSelector, function(event) {
      return Gofer.clickHandler(event, this);
    });
    $(window).on("popstate", function(event) {
      return Gofer.popStateHandler(event);
    });
    return this;
  };

  Gofer.buildPageFromDOM = function() {
    var page, path;
    path = window.location.pathname;
    page = new Gofer.Page(path);
    page.build($("html").outerHTML());
    return Gofer.pages[path] = page;
  };

  Gofer.clickHandler = function(event, link) {
    var active, path;
    if (event.which > 1 || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) {
      throw "Gofer doesn't trigger on shift+click, ctrl+click, alt+click, or mouse clicks on buttons besides the left one.";
      return;
    }
    if (link.tagName.toUpperCase() !== 'A') {
      throw "Gofer requires an anchor tag";
      return;
    }
    if (location.protocol !== link.protocol) {
      throw "Gofer requires links to have the same protocol";
      return;
    }
    if (location.hostname !== link.hostname) {
      throw "Gofer requires links to have the same hostname";
      return;
    }
    if (link.hash && link.href.replace(link.hash, '') === location.href.replace(location.hash, '')) {
      throw "Gofer doesn't work on hash links";
      return;
    }
    if (link.href === location.href + '#') {
      throw "Gofer doesn't work on hash links";
      return;
    }
    if (Gofer.config.limit) {
      active = $(Gofer.config.linkSelector).slice(0, limit);
      if (!$(this).is(active)) {
        return;
      }
    }
    event.preventDefault();
    path = link.pathname;
    console.log(path);
    Gofer.config.beforeRender();
    Gofer.pageByUrl(path, "renderAll");
    return Gofer.config.afterRender();
  };

  Gofer.pageByUrl = function(url, method) {
    var req;
    if (!Gofer.pages[url]) {
      Gofer.pages[url] = new Gofer.Page(url);
      if (window.sessionStorage.getItem(url)) {
        Gofer.pages[url].retrieve();
        if (method) {
          return Gofer.pages[url][method]();
        }
      } else {
        "loading.......";
        req = Gofer.pages[url].load();
        if (method) {
          return req.then(function() {
            console.log("then...");
            console.log(this);
            return Gofer.pages[url][method]();
          });
        }
      }
    } else if (method) {
      return Gofer.pages[url][method]();
    } else {
      return Gofer.pages[url];
    }
  };

  Gofer.cachePages = function(urls) {
    var url, _i, _len, _results;
    if (util.getType(urls === "string")) {
      urls = [urls];
    } else if (type in urls !== "array") {
      return;
    }
    _results = [];
    for (_i = 0, _len = urls.length; _i < _len; _i++) {
      url = urls[_i];
      _results.push(Gofer.pageByUrl(url));
    }
    return _results;
  };

  Gofer.popStateHandler = function(event) {
    if (event.originalEvent.state) {
      return Gofer.pageByUrl(event.originalEvent.state.path).renderAll();
    }
  };

  Gofer.loadLinks = function() {
    var i, path, _i, _len, _ref;
    _ref = goferPaths();
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      path = _ref[i];
      if (Gofer.config.limit && i > Gofer.config.limit) {
        return;
      }
      if (!Gofer.pages[path]) {
        Gofer.pageByUrl(path);
      }
    }
    return Gofer.pages;
  };

  Gofer.tidyStorage = function() {
    var obj, path, pathsToKeep, _ref, _results;
    pathsToKeep = goferPaths();
    _ref = Gofer.pages;
    _results = [];
    for (path in _ref) {
      obj = _ref[path];
      if (Gofer.pages.hasOwnProperty(path) && __indexOf.call(pathsToKeep, path) < 0) {
        Gofer.pages[path].save();
        _results.push(delete Gofer.pages[path]);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  $.subscribe("gofer.pageRenderAll", function(event, page) {
    console.log("pageRenderAll " + page.url);
    page.addToHistory();
    Gofer.tidyStorage();
    return Gofer.loadLinks();
  });

  $.fn.gofer = Gofer.fnGofer;

  Gofer.Page = Page = (function() {
    Page.CLASS = "Page";

    function Page(url) {
      this.addToHistory = __bind(this.addToHistory, this);
      this.load = __bind(this.load, this);
      this.build = __bind(this.build, this);
      this.add = __bind(this.add, this);
      this.empty = __bind(this.empty, this);
      this.renderAll = __bind(this.renderAll, this);
      this.retrieve = __bind(this.retrieve, this);
      this.save = __bind(this.save, this);
      this.url = url;
      this.fragments = [];
      this.targets = Gofer.config.contentTargets;
    }

    Page.prototype.save = function() {
      var collection, fragment, _i, _len, _ref;
      collection = [];
      _ref = this.fragments;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fragment = _ref[_i];
        collection.push(fragment.serialize());
      }
      window.sessionStorage.setItem(this.url, JSON.stringify(collection));
      $.publish("gofer.pageSave", [this]);
      return this;
    };

    Page.prototype.retrieve = function() {
      var fragment, _i, _len, _ref;
      _ref = JSON.parse(window.sessionStorage.getItem(this.url));
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fragment = _ref[_i];
        this.add({
          parent: this,
          html: fragment.html,
          target: fragment.target
        });
      }
      $.publish("gofer.pageRetrieve", [this]);
      return this;
    };

    Page.prototype.renderAll = function() {
      var fragment, _i, _len, _ref;
      _ref = this.fragments;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fragment = _ref[_i];
        fragment.render();
      }
      $.publish("gofer.pageRenderAll", [this]);
      return this;
    };

    Page.prototype.empty = function() {
      delete this.fragments;
      $.publish("gofer.pageEmpty", [this]);
      return this;
    };

    Page.prototype.add = function(options) {
      var frag;
      frag = new Fragment(options);
      this.fragments.push(frag);
      if (Gofer.config.preloadImages === true) {
        frag.preloadImages();
      }
      $.publish("gofer.pageAdd", [this, frag]);
      return frag;
    };

    Page.prototype.build = function(html) {
      var $html, fragmentHtml, target, _i, _len, _ref;
      this.raw = html;
      $html = $(html);
      _ref = this.targets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        target = _ref[_i];
        fragmentHtml = $html.find(target);
        this.add({
          parent: this,
          html: fragmentHtml,
          $el: $html.find(target),
          target: target
        });
      }
      $.publish("gofer.pageBuild", [this]);
      return this;
    };

    Page.prototype.load = function() {
      var page;
      page = this;
      if (this.request) {
        return this.request;
      }
      $.publish("gofer.pageLoadStart", [page]);
      return this.request = $.ajax({
        url: this.url,
        type: "GET",
        dataType: "html",
        error: function(req, status, err) {
          return $.publish("gofer.pageLoadError", [page]);
        },
        success: function(data, status, req) {
          $.publish("gofer.pageLoadSuccess", [page]);
          page.raw = data;
          return page.build(data);
        },
        done: function(data, status, req) {
          return $.publish("gofer.pageLoadDone", [page]);
        }
      });
    };

    Page.prototype.addToHistory = function() {
      window.history.pushState({
        path: this.url
      }, null, this.url);
      return this;
    };

    return Page;

  })();

  Gofer.Fragment = Fragment = (function() {
    function Fragment(options) {
      this.serialize = __bind(this.serialize, this);
      this.setHtml = __bind(this.setHtml, this);
      this.preloadImages = __bind(this.preloadImages, this);
      this.render = __bind(this.render, this);
      this.parent = options.parent, this.html = options.html, this.target = options.target, this.$el = options.$el;
      this.$target = $(this.target);
      this.$html = $(this.html);
    }

    Fragment.prototype.render = function() {
      var gist, _i, _len, _ref, _ref1;
      this.$target.replaceWith(this.$el);
      if ((_ref = this.gists) != null ? _ref.length : void 0) {
        _ref1 = this.gists;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          gist = _ref1[_i];
          gist.render();
        }
      }
      return this;
    };

    Fragment.prototype.preloadImages = function() {
      return this.$html.find("img").each(function() {
        var img;
        img = new Image();
        return img.src = this.src;
      });
    };

    Fragment.prototype.setHtml = function(contents) {
      if (contents instanceof jQuery) {
        this.$html = contents;
        return this.html = contents.html();
      } else {
        this.$html = $(contents);
        return this.html = contents;
      }
    };

    Fragment.prototype.serialize = function() {
      return {
        target: this.target,
        html: this.$html.outerHTML()
      };
    };

    return Fragment;

  })();

}).call(this);
