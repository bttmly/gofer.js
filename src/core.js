// Generated by CoffeeScript 1.6.3
(function() {
  var goferLinks, goferPaths,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.Gofer = {
    pages: {},
    defaults: {
      beforeRender: $.noop,
      afterRender: $.noop,
      customHeaders: {},
      customData: {},
      limit: 0
    },
    config: {}
  };

  goferLinks = function() {
    return $(Gofer.config.linkSelector);
  };

  goferPaths = function() {
    var a, _i, _len, _ref, _results;
    _ref = goferLinks();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      a = _ref[_i];
      _results.push(a.pathname);
    }
    return _results;
  };

  Gofer.fnGofer = function(targets, options) {
    options || (options = {});
    options.linkSelector = this.selector;
    options.contentTargets = targets;
    $.extend(Gofer.config, Gofer.defaults, options);
    Gofer.loadLinks();
    Gofer.buildPageFromDOM();
    $("body").on("click", Gofer.config.linkSelector, function(event) {
      return Gofer.clickHandler(event, this);
    });
    $(window).on("popstate", function(event) {
      return Gofer.popStateHandler(event);
    });
    return this;
  };

  Gofer.buildPageFromDOM = function() {
    var page, path;
    path = window.location.pathname;
    page = new Gofer.Page(path);
    page.build($("html").outerHTML());
    return Gofer.pages[path] = page;
  };

  Gofer.clickHandler = function(event, link) {
    var active, path;
    if (event.which > 1 || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) {
      throw "Gofer doesn't trigger on shift+click, ctrl+click, alt+click, or mouse clicks on buttons besides the left one.";
      return;
    }
    if (link.tagName.toUpperCase() !== 'A') {
      throw "Gofer requires an anchor tag";
      return;
    }
    if (location.protocol !== link.protocol) {
      throw "Gofer requires links to have the same protocol";
      return;
    }
    if (location.hostname !== link.hostname) {
      throw "Gofer requires links to have the same hostname";
      return;
    }
    if (link.hash && link.href.replace(link.hash, '') === location.href.replace(location.hash, '')) {
      throw "Gofer doesn't work on hash links";
      return;
    }
    if (link.href === location.href + '#') {
      throw "Gofer doesn't work on hash links";
      return;
    }
    if (Gofer.config.limit) {
      active = $(Gofer.config.linkSelector).slice(0, limit);
      if (!$(this).is(active)) {
        return;
      }
    }
    event.preventDefault();
    path = link.pathname;
    console.log(path);
    Gofer.config.beforeRender();
    Gofer.pageByUrl(path, "renderAll");
    return Gofer.config.afterRender();
  };

  Gofer.pageByUrl = function(url, method) {
    var req;
    if (!Gofer.pages[url]) {
      Gofer.pages[url] = new Gofer.Page(url);
      if (window.sessionStorage.getItem(url)) {
        Gofer.pages[url].retrieve();
        if (method) {
          return Gofer.pages[url][method]();
        }
      } else {
        "loading.......";
        req = Gofer.pages[url].load();
        if (method) {
          return req.then(function() {
            console.log("then...");
            console.log(this);
            return Gofer.pages[url][method]();
          });
        }
      }
    } else if (method) {
      return Gofer.pages[url][method]();
    } else {
      return Gofer.pages[url];
    }
  };

  Gofer.cachePages = function(urls) {
    var url, _i, _len, _results;
    if (util.getType(urls === "string")) {
      urls = [urls];
    } else if (type in urls !== "array") {
      return;
    }
    _results = [];
    for (_i = 0, _len = urls.length; _i < _len; _i++) {
      url = urls[_i];
      _results.push(Gofer.pageByUrl(url));
    }
    return _results;
  };

  Gofer.popStateHandler = function(event) {
    if (event.originalEvent.state) {
      return Gofer.pageByUrl(event.originalEvent.state.path).renderAll();
    }
  };

  Gofer.loadLinks = function() {
    var i, path, _i, _len, _ref;
    _ref = goferPaths();
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      path = _ref[i];
      if (Gofer.config.limit && i > Gofer.config.limit) {
        return;
      }
      if (!Gofer.pages[path]) {
        Gofer.pageByUrl(path);
      }
    }
    return Gofer.pages;
  };

  Gofer.tidyStorage = function() {
    var obj, path, pathsToKeep, _ref, _results;
    pathsToKeep = goferPaths();
    _ref = Gofer.pages;
    _results = [];
    for (path in _ref) {
      obj = _ref[path];
      if (Gofer.pages.hasOwnProperty(path) && __indexOf.call(pathsToKeep, path) < 0) {
        Gofer.pages[path].save();
        _results.push(delete Gofer.pages[path]);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  $.subscribe("gofer.pageRenderAll", function(event, page) {
    console.log("pageRenderAll " + page.url);
    page.addToHistory();
    Gofer.tidyStorage();
    return Gofer.loadLinks();
  });

  $.fn.gofer = Gofer.fnGofer;

}).call(this);
