// Generated by CoffeeScript 1.6.3
(function($) {
  $.fn.splink = function(targetSelector, options, callback) {
    var defaults, s, setHtml, settings, splinkLoad;
    if (!(window.sessionStorage && window.history.pushState)) {
      return;
    }
    defaults = {
      dataAttr: "data-splink-selector",
      loadingClass: "splink-loading",
      prefetch: false,
      animate: false
    };
    if (options) {
      if ($.isFunction(options)) {
        callback = options;
        options = void 0;
        settings = defaults;
      } else if ($.isObject(options)) {
        settings = $.extend({}, defaults, options);
      }
    }
    s = {
      session: window.sessionStorage,
      elements: this,
      $elements: $(this),
      $selector: $(this).selector,
      $target: $(targetSelector),
      $html: $("html"),
      $body: $("body")
    };
    if (settings.prefetch) {
      $elements.each(function() {});
    }
    splinkLoad = function(el, immediate, callback) {
      var html;
      html = void 0;
      /*
      l =
        link        : el
        href        : el.href
        path        : el.pathname
        $link       : $(el)
        subselector : $(el).attr(settings.dataAttr)
      */

      return $.ajax({
        url: el.path,
        type: "GET",
        dataType: "html",
        context: s.$target,
        beforeSend: function(xhr, settings) {
          if (immediate) {
            return settings.context.addClass(settings.loadingClass);
          }
        },
        error: function(xhr, status, error) {
          return console.error(error);
        },
        success: function(data, status, xhr) {
          var state;
          s.session[el.path] = html = (function() {
            if (el.subselector) {
              return $("<div>").append(jQuery.parseHTML(data)).find(el.subselector).html();
            } else {
              return data;
            }
          })();
          if (!html.length) {
            console.warn("No HTML returned");
          }
          if (immediate) {
            state = {
              path: el.path,
              target: s.$target,
              tarHtml: s.session[el.path]
            };
            window.history.pushState(state, null, el.path);
            return s.$target.html(s.session[el.path]);
          }
        },
        complete: function(text, status, xhr) {
          if (immediate) {
            $(this).removeClass(settings.loadingClass);
          }
          if (callback != null) {
            return callback($(this), "ajax", status);
          }
        }
      });
    };
    setHtml = function(element, html) {
      return element.html(html);
    };
    $(window).off("popstate");
    $(window).on("popstate", function(event) {
      if (s.session[window.location.pathname]) {
        s.$target.html(s.session[window.location.pathname]);
      } else {
        window.location.pathname;
      }
    });
    s.$body.on("click", "" + s.$selector, function(event) {
      var el, state;
      event.preventDefault();
      el = {
        link: this,
        href: this.href,
        path: this.pathname,
        $link: $(this),
        subselector: $(this).attr(settings.dataAttr)
      };
      if (s.session[el.path]) {
        state = {
          path: el.path,
          target: s.$target,
          tarHtml: s.session[el.path]
        };
        window.history.pushState({
          path: el.path,
          target: s.$target,
          tarHtml: s.session[el.path]
        }, null, el.path);
        s.$target.html(s.session[el.path]);
        return callback(s.$target, "local", "success");
      } else {
        if (!s.session[window.location.pathname]) {
          s.session[window.location.pathname] = s.$target.html();
        }
        splinkLoad(el, true, callback);
      }
    });
    return this;
  };
})(jQuery);
