// Generated by CoffeeScript 1.6.3
(function() {
  (function($) {
    $.fn.splink = function(targetSelector, options, callback) {
      var config, s;
      if (!(window.sessionStorage && window.history.pushState)) {
        return;
      }
      config = {
        dataAttr: "data-splink-selector",
        loadingClass: "splink-loading",
        animate: false,
        cbAjaxOnly: true
      };
      if (options) {
        if ($.isFunction(options)) {
          callback = options;
          options = void 0;
        } else if ($.isObject(options)) {
          $.extend(config, options);
        }
      }
      s = {
        session: window.sessionStorage,
        elements: this,
        $elements: $(this),
        $selector: $(this).selector,
        $target: $(targetSelector),
        $html: $("html"),
        $body: $("body")
      };
      window.addEventListener("popstate", function(event) {
        s.$target.html(s.session[window.location.pathname]);
      });
      s.$body.on("click", "" + s.$selector, function(event) {
        var e;
        event.preventDefault();
        e = {
          link: this,
          href: this.href,
          path: this.pathname,
          $link: $(this),
          subselector: $(this).attr(config.dataAttr)
        };
        if (s.session[e.path]) {
          s.$target.html(s.session[e.path]);
          window.history.pushState(null, null, e.path);
          console.log("html pulled from sessionStorage");
        } else {
          if (!s.session[window.location.pathname]) {
            s.session[window.location.pathname] = s.$target.html();
          }
          $.ajax({
            url: e.path,
            type: "GET",
            dataType: "html",
            context: s.$target,
            beforeSend: function(xhr, settings) {
              return settings.context.addClass(config.loadingClass);
            }
          }).done(function(responseText) {
            e.html = (function() {
              if (e.subselector) {
                return jQuery("<div>").append(jQuery.parseHTML(responseText)).find(e.subselector);
              } else {
                return responseText;
              }
            })();
            if (e.html.length) {
              s.session[e.path] = $(this).html(e.html).html();
              return window.history.pushState(null, null, e.href);
            } else {
              return console.warn("No HTML returned");
            }
          }).fail(function(xhr, status, error) {
            return console.error(error);
          }).always(function(text, status, xhr) {
            var response;
            response = {
              text: text,
              status: status,
              xhr: xhr
            };
            $(this).removeClass(config.loadingClass);
            if (callback != null) {
              return callback(response, $(this), e.html);
            }
          });
        }
      });
      return this;
    };
  })(jQuery);

  /*
  This is the JS for jQuery.load()
  
  jQuery.fn.load = function( url, params, callback ) {
  	if ( typeof url !== "string" && _load ) {
  		return _load.apply( this, arguments );
  	}
  
  	var selector, response, type,
  		self = this,
  		off = url.indexOf(" ");
  
  	if ( off >= 0 ) {
  		selector = url.slice( off, url.length );
  		url = url.slice( 0, off );
  	}
  
  	// If it's a function
  	if ( jQuery.isFunction( params ) ) {
  
  		// We assume that it's the callback
  		callback = params;
  		params = undefined;
  
  	// Otherwise, build a param string
  	} else if ( params && typeof params === "object" ) {
  		type = "POST";
  	}
  
  	// If we have elements to modify, make the request
  	if ( self.length > 0 ) {
  		jQuery.ajax({
  			url: url,
  
  			// if "type" variable is undefined, then "GET" method will be used
  			type: type,
  			dataType: "html",
  			data: params
  		}).done(function( responseText ) {
  
  			// Save response for use in complete callback
  			response = arguments;
  
  			self.html( selector ?
  
  				// If a selector was specified, locate the right elements in a dummy div
  				// Exclude scripts to avoid IE 'Permission Denied' errors
  				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :
  
  				// Otherwise use the full result
  				responseText );
  
  		}).complete( callback && function( jqXHR, status ) {
  			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
  		});
  	}
  
  	return this;
  };
  */


}).call(this);
